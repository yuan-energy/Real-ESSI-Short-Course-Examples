// 
// Real ESSI Simulator
// Modeling and Simulation Examples
// http://real-essi.info
//
model name "shell_structure" ;

// Define Material and Geometry
// Choice of materials, comment or uncomment lines below
// If you change material here, you have to change
// wave field too!
include "material_set1.fei";
include "wave_field1.fei";

/// include "material_set2.fei";
/// include "wave_field2.fei";

/// include "material_set3.fei";
/// include "wave_field3.fei";

include "node.fei";
include "element.fei";
include "boundary_condition.fei";
include "damping_parameters.fei";
include "damping.fei";

// It is recommended to run check model before any simulation.
// The hdf5 output can be visualized to check the boundary conditions.

// check model;

// Simulate Loading Stage 1: Self Weight

new loading stage "Self_weight";
add acceleration field # 1 
  ax =  0*g
  ay =  0*g
  az =  -g ;
add load # 1 to all elements type self_weight use acceleration field # 1;

// Simulation Options:
define convergence test Relative_Norm_Unbalanced_Force
  tolerance =  1E-2
  minimum_absolute_tolerance = 100
  maximum_iterations = 80
  ;
define algorithm Newton;
if(IS_PARALLEL==0)
{define solver UMFPack;}
else
{define solver parallel;}

// Static loading increments:
define load factor increment 0.1;
simulate 10 steps using static algorithm;

// Simulate Loading Stage 2: DRM Motion

new loading stage "motion";
 

add load # 2 type DRM from wave field 
    # 1 in direction ux 
    # 2 in direction uy 
    # 3 in direction uz 
    soil_surface at z = 0 * m 
    hdf5_file = "DRMinput.hdf5" ; 

// Simulation Options:
define convergence test Relative_Norm_Unbalanced_Force
  tolerance =  1E-2
  minimum_absolute_tolerance = 100
  maximum_iterations = 80
  ;
define algorithm Newton;
enable subincrement using minimum_time_step = 0.0001 ; 
if(IS_PARALLEL==0)
{define solver UMFPack;}
else
{define solver parallel;}

// Dynamic loading steps:
define dynamic integrator Newmark with 
  gamma = 0.55
  beta = 0.275625 ;
simulate 210 steps using transient algorithm 
    time_step = 0.0419384905125*s ;

// No more loading stages. Stop the program politely:
bye;

