model name "DRM3D" ;
Elastic = 2e8*N/m^2; 
nu    = 0.1;        
rho   = 2000*kg/m^3;  

Soil_Elastic_Modulus = 1.3e9*Pa;
Soil_Density = 2140*kg/m^3;
Soil_Poisons_ratio = 0.25;
//  Soil
add material # 1 type DruckerPragerMultipleYieldSurfaceGoverGmax
 mass_density = Soil_Density  //0.0*kg/m^3 
 initial_shear_modulus = Soil_Elastic_Modulus //3E8 * Pa 
 poisson_ratio = Soil_Poisons_ratio //0.0 
 initial_confining_stress = 1E5 * Pa
 reference_pressure = 1E5 * Pa
 pressure_exponential_n = 0.5
 cohesion = 1. * kPa
 dilation_angle_eta =1.0 
 dilation_scale = 0.0
 total_number_of_shear_modulus = 9
 GoverGmax = 
 "1,0.995,0.966,0.873,0.787,0.467,0.320,0.109,0.063"  
 ShearStrainGamma = 
 "0,1E-6,1E-5,5E-5,1E-4, 0.0005, 0.001, 0.005, 0.01"
 ;

// DRM layer
add material # 2 type linear_elastic_isotropic_3d
  mass_density =  Soil_Density
  elastic_modulus = Soil_Elastic_Modulus
  poisson_ratio =  Soil_Poisons_ratio;

// Damping Layers
add material # 3 type linear_elastic_isotropic_3d
  mass_density =  Soil_Density
  elastic_modulus = Soil_Elastic_Modulus
  poisson_ratio =  Soil_Poisons_ratio;

// Foudnation
add material # 4 type linear_elastic_isotropic_3d
  mass_density = 2500*kg/m^3
  elastic_modulus = 3e10*N/m^2
  poisson_ratio =  0.2 ;

// Structure
shell_Elastic = 3e10*N/m^2; 
shell_v    = 0.2;        
shell_rho   = 2500*kg/m^3;    
add material # 5 type linear_elastic_isotropic_3d
  mass_density = shell_rho
  elastic_modulus = shell_Elastic
  poisson_ratio = shell_v;

// Contact paramters
Kn = 1e11 * kg /s^2 ; 


// check model;

// Damping paramters
Gamma = 0.55; 
Beta = 0.25*(0.5+Gamma)*(0.5+Gamma); 

T1 = 2*s; 
T2 = 0.2*s; 
w1 = 2*pi/T1; 
w2 = 2*pi/T2; 

// Structure Damping 
xi_1 = 0.03; 
rayl_1_a1 = 2*xi_1/(w1+w2); 
rayl_1_a0 = rayl_1_a1*w1*w2; 

// Soil Damping 
xi_2 = 0.06; 
rayl_2_a1 = 2*xi_2/(w1+w2); 
rayl_2_a0 = rayl_2_a1*w1*w2; 

// DRM layer Damping 
xi_3 = 0.06; 
rayl_3_a1 = 2*xi_3/(w1+w2); 
rayl_3_a0 = rayl_3_a1*w1*w2; 

// Damping layer Damping 
xi_4 = 0.4 ; 
rayl_4_a1 = 2*xi_4/(w1+w2); 
rayl_4_a0 = rayl_4_a1*w1*w2; 

add damping # 1 type Rayleigh with a0 = rayl_1_a0 a1 = rayl_1_a1 stiffness_to_use = Initial_Stiffness; 
add damping # 2 type Rayleigh with a0 = rayl_2_a0 a1 = rayl_2_a1 stiffness_to_use = Initial_Stiffness; 
add damping # 3 type Rayleigh with a0 = rayl_3_a0 a1 = rayl_3_a1 stiffness_to_use = Initial_Stiffness; 
add damping # 4 type Rayleigh with a0 = rayl_4_a0 a1 = rayl_4_a1 stiffness_to_use = Initial_Stiffness; 

include "node.fei";
include "element.fei";
include "load.fei";
include "damping.fei";

add wave field # 1 with
  acceleration_filename = "scaled_NORTHR_x_A.txt"
  unit_of_acceleration = 1 * m/s^2
  displacement_filename = "scaled_NORTHR_x_D.txt"
  unit_of_displacement = 1 * m
  add_compensation_time = 0.5 * s
  acceleration_depth = 0 * m
  monitoring_location = within_soil_layer
  soil_profile_filename = "soil_profile.txt"
  unit_of_Vs = 1 * m/s
  unit_of_rho = 1 * kg/m^3
  unit_of_damping = absolute
  unit_of_thickness = 1*m 
  ;
  
add wave field # 2 with
  acceleration_filename = "scaled_NORTHR_y_A.txt"
  unit_of_acceleration = 1 * m/s^2
  displacement_filename = "scaled_NORTHR_y_D.txt"
  unit_of_displacement = 1 * m
  add_compensation_time = 0.5 * s
  acceleration_depth = 0 * m
  monitoring_location = within_soil_layer
  soil_profile_filename = "soil_profile.txt"
  unit_of_Vs = 1 * m/s
  unit_of_rho = 1 * kg/m^3
  unit_of_damping = absolute
  unit_of_thickness = 1*m 
  ;

add wave field # 3 with
  acceleration_filename = "scaled_NORTHR_z_A.txt"
  unit_of_acceleration = 1 * m/s^2
  displacement_filename = "scaled_NORTHR_z_D.txt"
  unit_of_displacement = 1 * m
  add_compensation_time = 0.5 * s
  acceleration_depth = 0 * m
  monitoring_location = within_soil_layer
  soil_profile_filename = "soil_profile_Vp.txt"
  unit_of_Vs = 1 * m/s
  unit_of_rho = 1 * kg/m^3
  unit_of_damping = absolute
  unit_of_thickness = 1*m 
  ;


new loading stage "Self_weight";
add acceleration field # 1 
  ax =  0*g
  ay =  0*g
  az =  -g ;
add load # 1 to all elements type self_weight use acceleration field # 1;

define NDMaterial constitutive integration algorithm Backward_Euler
  yield_function_relative_tolerance =  1e-17
  stress_relative_tolerance =  1e-17
  maximum_iterations = 10 ;
  
define convergence test Relative_Norm_Unbalanced_Force
  tolerance =  1E-2
  minimum_absolute_tolerance = 1e2
  maximum_iterations = 200
  ;
define algorithm Newton; 
if(IS_PARALLEL==0)
{define solver UMFPack;}
else
{define solver parallel;}
define load factor increment 1;
simulate 1 steps using static algorithm;

new loading stage "motion";


enable acceleration output; 
add load # 2 type DRM from wave field 
    # 1 in direction ux 
    # 2 in direction uy
    # 3 in direction uz
    soil_surface at z = 30 * m 
    hdf5_file = "DRMinput.hdf5" ; 
define NDMaterial constitutive integration algorithm Backward_Euler
  yield_function_relative_tolerance =  1e-17
  stress_relative_tolerance =  1e-17
  maximum_iterations = 10 ;
  
define convergence test Relative_Norm_Unbalanced_Force
  tolerance =  5E-2
  minimum_absolute_tolerance = 1e2
  maximum_iterations = 200
  ;

define algorithm Newton; 
if(IS_PARALLEL==0)
{define solver UMFPack;}
else
{define solver parallel;}

define dynamic integrator Newmark with 
  gamma = Gamma
  beta = Beta;
simulate 3500 steps using transient algorithm 
    time_step = 0.01*s ;

bye;











