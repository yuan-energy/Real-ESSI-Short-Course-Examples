

model name "shell_structure" ;

foundation_Elastic = 3e10*N/m^2; 
foundation_nu    = 0.2;        
foundation_rho   = 2500*kg/m^3;     
add material # 4 type linear_elastic_isotropic_3d
  mass_density = foundation_rho
  elastic_modulus = foundation_Elastic
  poisson_ratio = foundation_nu;

shell_Elastic = 3e10*N/m^2; 
shell_v    = 0.2;        
shell_rho   = 2500*kg/m^3;    
add material # 5 type linear_elastic_isotropic_3d
  mass_density = shell_rho
  elastic_modulus = shell_Elastic
  poisson_ratio = shell_v;



// Damping paramters
Gamma = 0.7; 
Beta = 0.25*(0.5+Gamma)*(0.5+Gamma); 

T1 = 2*s; 
T2 = 0.2*s; 
w1 = 2*pi/T1; 
w2 = 2*pi/T2; 

// Structural Rayleigh Damping Ratio 
xi_1 = 0.03; 
rayl_1_a1 = 2*xi_1/(w1+w2); 
rayl_1_a0 = rayl_1_a1*w1*w2; 

// Foundation Rayleigh Damping Ratio 
xi_2 = 0.06; 
rayl_2_a1 = 2*xi_2/(w1+w2); 
rayl_2_a0 = rayl_2_a1*w1*w2; 



add damping # 1 type Rayleigh with a0 = rayl_1_a0 a1 = rayl_1_a1 stiffness_to_use = Initial_Stiffness; 
add damping # 2 type Rayleigh with a0 = rayl_2_a0 a1 = rayl_2_a1 stiffness_to_use = Initial_Stiffness; 


include "node.fei";
include "element.fei";
// include "damping_structure.fei";
// 



new loading stage "Self_weight";
include "fix_foundation_uy_uz.fei";
add acceleration field # 1 
  ax =  0*g
  ay =  0*g
  az =  -g ;
add load # 101 to all elements type self_weight use acceleration field # 1;

define algorithm With_no_convergence_check ;
if(IS_PARALLEL==0)
{define solver UMFPack;}
else
{define solver parallel;}
define load factor increment 1;
simulate 1 steps using static algorithm;


new loading stage "imposed_motion" ;
enable acceleration output;
include "imposed_motion.fei";
define algorithm With_no_convergence_check ;
define solver UMFPack;
define dynamic integrator Newmark with 
   gamma = Gamma
   beta = Beta;
simulate 500 steps using transient algorithm 
    time_step = 0.01*s
    ;

bye;



bye;











