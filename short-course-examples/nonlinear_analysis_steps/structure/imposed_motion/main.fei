

model name "shell_structure" ;

Elastic = 2e8*N/m^2; 
nu    = 0.1;        
rho   = 1800*kg/m^3;     


shell_Elastic = 2.48e11*N/m^2; 
shell_v    = 0.1;        
shell_rho   = 3000*kg/m^3;    

add material # 4 type linear_elastic_isotropic_3d
  mass_density = shell_rho
  elastic_modulus = shell_Elastic
  poisson_ratio = shell_v;

add material # 5 type linear_elastic_isotropic_3d
  mass_density = rho
  elastic_modulus = Elastic
  poisson_ratio = nu;
// bonded Contact penalty_stiffness. 
Kn = 1e11 * kg /s^2 ; 

include "node.fei";
include "element.fei";


new loading stage "Self_weight";
include "fix_foundation_uy_uz.fei";
add acceleration field # 1 
  ax =  0*g
  ay =  0*g
  az =  -g ;
add load # 101 to all elements type self_weight use acceleration field # 1;

define algorithm With_no_convergence_check ;
if(IS_PARALLEL==0)
{define solver UMFPack;}
else
{define solver parallel;}
define load factor increment 1;
simulate 1 steps using static algorithm;


// include "load.fei";
new loading stage "imposed_motion" ;
include "load.fei";
define algorithm With_no_convergence_check ;
define solver UMFPack;
define dynamic integrator Newmark with 
   gamma = 0.5050 
   beta = 0.2525;
simulate 3500 steps using transient algorithm 
    time_step = 0.01*s
    ;

bye;



bye;











